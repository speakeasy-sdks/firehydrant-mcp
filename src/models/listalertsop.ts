/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import {
  AlertsAlertEntityPaginated,
  AlertsAlertEntityPaginated$zodSchema,
} from "./alertsalertentitypaginated.js";

/**
 * The strategy to match tags. `any` will return alerts that have at least one of the supplied tags, `match_all` will return only alerts that have all of the supplied tags, and `exclude` will only return alerts that have none of the supplied tags. This currently only works for Signals alerts.
 */
export const ListAlertsTagMatchStrategy$zodSchema = z.enum([
  "any",
  "match_all",
  "exclude",
]).describe(
  "The strategy to match tags. `any` will return alerts that have at least one of the supplied tags, `match_all` will return only alerts that have all of the supplied tags, and `exclude` will only return alerts that have none of the supplied tags. This currently only works for Signals alerts.",
);

export type ListAlertsTagMatchStrategy = z.infer<
  typeof ListAlertsTagMatchStrategy$zodSchema
>;

export type ListAlertsRequest = {
  page?: number | null | undefined;
  per_page?: number | null | undefined;
  query?: string | null | undefined;
  users?: string | null | undefined;
  teams?: string | null | undefined;
  signal_rules?: string | null | undefined;
  environments?: string | null | undefined;
  functionalities?: string | null | undefined;
  services?: string | null | undefined;
  tags?: string | null | undefined;
  tag_match_strategy?: ListAlertsTagMatchStrategy | null | undefined;
  statuses?: string | null | undefined;
};

export const ListAlertsRequest$zodSchema: z.ZodType<
  ListAlertsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  environments: z.string().describe(
    "A comma separated list of environment IDs. This currently only works for Signals alerts.",
  ).nullable().optional(),
  functionalities: z.string().describe(
    "A comma separated list of functionality IDs. This currently only works for Signals alerts.",
  ).nullable().optional(),
  page: z.number().int().nullable().optional(),
  per_page: z.number().int().nullable().optional(),
  query: z.string().describe("A text query for alerts").nullable().optional(),
  services: z.string().describe(
    "A comma separated list of service IDs. This currently only works for Signals alerts.",
  ).nullable().optional(),
  signal_rules: z.string().describe(
    "A comma separated list of signals rule IDs. This currently only works for Signals alerts.",
  ).nullable().optional(),
  statuses: z.string().describe(
    "A comma separated list of statuses to filter by. Valid statuses are: opened, acknowledged, resolved, ignored, expired, linked, or snoozed",
  ).nullable().optional(),
  tag_match_strategy: ListAlertsTagMatchStrategy$zodSchema.nullable()
    .optional(),
  tags: z.string().describe(
    "A comma separated list of tags. This currently only works for Signals alerts.",
  ).nullable().optional(),
  teams: z.string().describe(
    "A comma separated list of team IDs. This currently only works for Signals alerts.",
  ).nullable().optional(),
  users: z.string().describe(
    "A comma separated list of user IDs. This currently only works for Signals alerts.",
  ).nullable().optional(),
});

export type ListAlertsResponse = {
  ContentType: string;
  StatusCode: number;
  RawResponse: Response;
  Alerts_AlertEntityPaginated?: AlertsAlertEntityPaginated | undefined;
};

export const ListAlertsResponse$zodSchema: z.ZodType<
  ListAlertsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Alerts_AlertEntityPaginated: AlertsAlertEntityPaginated$zodSchema.optional(),
  ContentType: z.string(),
  RawResponse: z.instanceof(Response),
  StatusCode: z.number().int(),
});
