/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";

export const IncidentsRetrospectiveFieldEntityType$zodSchema = z.enum([
  "text",
  "single_select",
  "multi_select",
  "numeric",
  "datetime",
  "dynamic_input_group",
  "markdown",
  "markdown_text",
]);

export type IncidentsRetrospectiveFieldEntityType = z.infer<
  typeof IncidentsRetrospectiveFieldEntityType$zodSchema
>;

export type Value = number | string | Array<{ [k: string]: any }>;

export const Value$zodSchema: z.ZodType<Value, z.ZodTypeDef, unknown> = z.union(
  [
    z.number().int(),
    z.string(),
    z.array(z.record(z.any())),
  ],
);

/**
 * Incidents_RetrospectiveFieldEntity model
 */
export type IncidentsRetrospectiveFieldEntity = {
  id?: string | null | undefined;
  label?: string | null | undefined;
  type?: IncidentsRetrospectiveFieldEntityType | null | undefined;
  help_text?: string | null | undefined;
  permissible_values?: Array<string> | null | undefined;
  is_required?: boolean | null | undefined;
  value?: number | string | Array<{ [k: string]: any }> | null | undefined;
  schema?: Array<string> | null | undefined;
};

export const IncidentsRetrospectiveFieldEntity$zodSchema: z.ZodType<
  IncidentsRetrospectiveFieldEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  help_text: z.string().nullable().optional(),
  id: z.string().nullable().optional(),
  is_required: z.boolean().nullable().optional(),
  label: z.string().nullable().optional(),
  permissible_values: z.array(z.string()).nullable().optional(),
  schema: z.array(z.string()).nullable().optional(),
  type: IncidentsRetrospectiveFieldEntityType$zodSchema.nullable().optional(),
  value: z.union([
    z.number().int(),
    z.string(),
    z.array(z.record(z.any())),
  ]).nullable().optional(),
}).describe("Incidents_RetrospectiveFieldEntity model");
