/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";
import { McpAgent } from "agents/mcp";
import type { Env } from "../worker-configuration.js";
import { FireHydrantCore } from "./core.js";
import { createConsoleLogger } from "./mcp-server/console-logger.js";
import { createMCPServer } from "./mcp-server/server.js";

interface State {}

type Props = Record<string, string>;

export class FirehydrantMcpMCP extends McpAgent<Env, State, Props> {
  server!: McpServer;

  async init() {
    this.server = createMCPServer({
      logger: createConsoleLogger("debug"),
      getSDK: () => this.getSDK(),
    });
  }

  getSDK() {
    const getHeader = (name: string) => this.props[name] || "";

    const sdk = new FireHydrantCore({
      debugLogger: {
        log: (...args) => console.log(...args),
        group: (...args) => console.group(...args),
        groupEnd: (...args) => console.groupEnd(...args),
      },
      security: async () => {
        return { api_key: getHeader("Authorization") };
      },
    });
    return sdk;
  }
}

export default {
  fetch(request: Request, env: Env, ctx: any) {
    const url = new URL(request.url);

    // Pass auth headers through to the MCP agent
    const headers: Record<string, string> = {};
    for (const [key, value] of request.headers.entries()) {
      headers[key.toLowerCase()] = value;
    }
    ctx.props = headers;

    if (url.pathname === "/sse" || url.pathname.startsWith("/sse/")) {
      return FirehydrantMcpMCP.serveSSE("/sse", {
        binding: "FIREHYDRANT-MCP_MCP",
      }).fetch(request, env, ctx);
    }

    if (url.pathname === "/mcp") {
      return FirehydrantMcpMCP.serve("/mcp", { binding: "FIREHYDRANT-MCP_MCP" })
        .fetch(request, env, ctx);
    }

    // Landing page
    if (url.pathname === "/") {
      const o = url.origin;
      const mcpConfig = {
        "mcpServers": {
          "FireHydrant": {
            "type": "sse",
            "url": `${o}/sse`,
            "headers": {
              "Authorization": "$" + "{" + "FIREHYDRANT-MCP_API_KEY" + "}",
            },
          },
        },
      };

      return new Response(
        `<pre>
firehydrant-mcp MCP Server

MCP Server Configuration:

${JSON.stringify(mcpConfig, null, 2)}
</pre>`,
        {
          headers: { "Content-Type": "text/html" },
        },
      );
    }

    return new Response("Not found", { status: 404 });
  },
};
